---------------------------------------------------------------------------
-- AN ELEVATOR CONTROLLER                                                --
---------------------------------------------------------------------------

-- Original example by Alessandra Giordani from the University of Trento.
-- This SMV program describes an elevator system for a 3-floors building.
-- It includes modules both for the physical system (reservation buttons,
-- cabin, door), and for the controller.

---------------------------------------------------------------------------
-- BUTTON                                                                --
---------------------------------------------------------------------------

-- For each floor there is a button to request service, that can be
-- pressed. A pressed button stays pressed unless reset by the
-- controller. A button that is not pressed can become pressed
-- nondeterministically.

MODULE Button(reset)
  VAR
    pressed : boolean;
  ASSIGN
    init(pressed) := FALSE;
    next(pressed) :=
      case
        pressed & reset  : FALSE;
        pressed & !reset : TRUE;
        !pressed         : {FALSE,TRUE};
      esac;

  -- REQ: The controller must not reset a button that is not pressed.



---------------------------------------------------------------------------
-- CABIN                                                                 --
---------------------------------------------------------------------------

-- The cabin can be at any floor between 1 and 3. It is equipped with an
-- engine that has a direction of motion, that can be either stopped, up
-- or down.

MODULE Cabin(direction)
  DEFINE N:=3;

  VAR
    floor     : 1..N;

  ASSIGN
    next(floor) :=
      case
        next(direction) = stop : floor;
        next(direction) = up   : case
            floor != N : floor + 1;
            TRUE: floor;
                                 esac;
        next(direction) = down : case
            floor != 1 : floor - 1;
            TRUE: floor;
                                 esac;
      esac;

  -- REQ: The cabin can move up only if the floor is not N.

  -- REQ: The cabin can move down only if the floor is not 1.



---------------------------------------------------------------------------
-- DOOR                                                                  --
---------------------------------------------------------------------------

-- The cabin is also equipped with a door, that can be either open
-- or closed. The door can receive either open, close or nop commands
-- from the controller, and it responds opening, closing, or
-- preserving the current state.

MODULE Door(door_cmd)
  VAR
    status : { open, closed };

  ASSIGN
    next(status) :=
      case
        door_cmd = open      : open;
        door_cmd = close     : closed;
        door_cmd = nop       : status;
      esac;

  -- REQ: The controller can issue an open command only if the door is closed.

  -- REQ: The controller can issue a close command only if the door is open.



---------------------------------------------------------------------------
-- CONTROLLER                                                            --
---------------------------------------------------------------------------

-- The controller takes in input (as sensory signals) the floor and the
-- direction of motion of the cabin, the status of the door, and the
-- status of the four buttons. It decides the controls to the engine, to
-- the door and to the buttons.

MODULE CTRL(floor, door, pressed_1, pressed_2, pressed_3)
  VAR
    direction : {up, down, stop};
    door_cmd : {open, close, nop};
    reset_1 : boolean;
    reset_2 : boolean;
    reset_3 : boolean;

  -- Button N is reset only if it is pressed, we are at floor N, and
  -- the door is open.
  ASSIGN
    reset_1 := (pressed_1 & floor = 1 & door = open);
    reset_2 := (pressed_2 & floor = 2 & door = open);
    reset_3 := (pressed_3 & floor = 3 & door = open);

  -- Check whether there are pending requests at the current floor,
  -- at a higher floor, and at a lower floor.
  DEFINE
    pending_here := (floor = 1 & pressed_1) | (floor = 2 & pressed_2) |
                    (floor = 3 & pressed_3);

    pending_up   := (floor = 1 & (pressed_2 | pressed_3)) |
                    (floor = 2 & pressed_3);

    pending_down := (floor = 3 & (pressed_1 | pressed_2)) |
                    (floor = 2 & pressed_1) ;

  -- * If the cabin is moving, do not send commands to the door.
  -- * If there is a pending request at the current floor and
  --   the door is closed, open it.
  -- * If there are pending requests at different floors and the
  --   door is open, close it.
  -- * Otherwise, do not send commands to the door.
  ASSIGN
    door_cmd := case
	    direction != stop : nop;
      pending_here & door = closed : open;

      door = open & ( pending_up | pending_down ): close;
      TRUE : nop;
      esac;


  -- Variable "last_dir" records the last movement direction of the cabin.
  VAR
    last_dir : {up,down};
  ASSIGN

    next(last_dir) :=
      case
        direction = stop : last_dir;
        TRUE             : direction;
      esac;

  -- * If the door is open, do not send move commands to the cabin.
  -- * If there is a pending request at the current floor
  --   and the cabin is moving, stop it.
  -- * If there are pending requests both at higher and at lower floors,
  --   keep moving in "last_dir".
  -- * If there are pending requests at higher (lower) floors,
  --   move up (down).
  -- * Otherwise, do not send commands to the cabin.
  ASSIGN
    init(direction) := stop;
    next(direction) :=
      case
      door = open | door_cmd = open : stop;
      pending_here : stop;
      pending_up & pending_down & direction = stop : last_dir;
      pending_up & pending_down: direction;
      pending_up : up;
      pending_down : down;
      TRUE : stop;
      esac;


  -- The cabin needs to stop before it can change direction.
  SPEC AG(direction = up -> AX(direction != down))
  SPEC AG(direction = down -> AX(direction != up))

  -- 1. The controller must not reset a button that is not pressed.
  LTLSPEC G((!pressed_1 -> !reset_1) & (!pressed_2 -> !reset_2) & (!pressed_3 -> !reset_3))

  --  2. The cabin can move up only if the floor is not N.
  LTLSPEC G(X(direction = up) -> floor != 3)

  --  3. The cabin can move down only if the floor is not 1
  LTLSPEC G(X(direction = down) -> floor != 1)

  --  4. The controller can issue an open command only if the door is closed
  LTLSPEC G(door_cmd = open -> door = closed)

  --  5. The controller can issue a close command only if the door is open.
  LTLSPEC G(door_cmd = close -> door = open)

  --  6. No button can reach a state where it remains pressed forever.
  LTLSPEC G(pressed_1 -> F !pressed_1)
  LTLSPEC G(pressed_2 -> F !pressed_2)
  LTLSPEC G(pressed_3 -> F !pressed_3)

  --  7. No pressed button can be reset until the cabin stops at the corresponding floor and opens the door.
    LTLSPEC G(pressed_1 & X(reset_1) -> X(floor = 1) & X(door = open))
    LTLSPEC G(pressed_2 & X(reset_2) -> X(floor = 2) & X(door = open))
    LTLSPEC G(pressed_3 & X(reset_3) -> X(floor = 3) & X(door = open))

  --  8. A button must be reset as soon as the cabin stops at the corresponding floor with the door open.
  LTLSPEC G(pressed_1 & floor = 1 & door = open -> reset_1)
  LTLSPEC G(pressed_2 & floor = 2 & door = open -> reset_2)
  LTLSPEC G(pressed_3 & floor = 3 & door = open -> reset_3)

  -- 9. The cabin can move only when the door is closed.
  LTLSPEC G(direction = up | direction = down -> door = closed)

  -- 10. If no button is pressed, the controller must issue no commands and the cabin must be stopped.
  LTLSPEC G(!pressed_1 & !pressed_2 & !pressed_3 -> door_cmd = nop & direction = stop)
---------------------------------------------------------------------------
-- MAIN                                                                  --
---------------------------------------------------------------------------

-- The main module shows the connection between modules.

MODULE main
  VAR
    cabin : Cabin(ctrl.direction);
    door  : Door(ctrl.door_cmd);
    button_1 : Button(ctrl.reset_1);
    button_2 : Button(ctrl.reset_2);
    button_3 : Button(ctrl.reset_3);
    ctrl : CTRL(cabin.floor, door.status,
                button_1.pressed, button_2.pressed,
                button_3.pressed);



---------------------------------------------------------------------------
-- REQUIREMENTS                                                          --
---------------------------------------------------------------------------

  -- The controller must satisfy the following requirements.

  -- REQ: No button can reach a state where it remains pressed forever.

  -- REQ: No pressed button can be reset until the cabin stops at the
  --      corresponding floor and opens the door.

  -- REQ: A button must be reset as soon as the cabin stops at the
  --      corresponding floor with the door open.

  -- REQ: The cabin can move only when the door is closed.

  -- REQ: If no button is pressed, the controller must issue no commands
  --      and the cabin must be stopped.

------------------------------------------------------------------------
/--
-- 173     pending_up & pending_down & direction = stop : last_dir;
By removing this model we get a case were we we are standing at stop
and it will just stay, because it keeps the direction and both 1 & 3 are pressed.

-- specification  G (pressed_3 ->  F !pressed_3) IN ctrl is false
-- as demonstrated by the following execution sequence
Trace Description: LTL Counterexample
  Trace Type: Counterexample
  -> State: 2.1 <-
    cabin.floor = 2
    door.status = open
    button_1.pressed = FALSE
    button_2.pressed = FALSE
    button_3.pressed = FALSE
    ctrl.direction = stop
    ctrl.door_cmd = nop
    ctrl.reset_1 = FALSE
    ctrl.reset_2 = FALSE
    ctrl.reset_3 = FALSE
    ctrl.last_dir = up
    cabin.N = 3
    ctrl.pending_down = FALSE
    ctrl.pending_up = FALSE
    ctrl.pending_here = FALSE
  -> State: 2.2 <-
    button_2.pressed = TRUE
    button_3.pressed = TRUE
    ctrl.door_cmd = close
    ctrl.reset_2 = TRUE
    ctrl.pending_up = TRUE
    ctrl.pending_here = TRUE
  -- Loop starts here
  -> State: 2.3 <-
    door.status = closed
    button_1.pressed = TRUE
    button_2.pressed = FALSE
    ctrl.door_cmd = nop
    ctrl.reset_2 = FALSE
    ctrl.pending_down = TRUE
    ctrl.pending_here = FALSE
  -> State: 2.4 <-
-- specification  G (reset_1 -> (reset_1 U (floor = 1 & door = open))) IN ctrl is true
-- specification  G (reset_2 -> (reset_2 U (floor = 2 & door = open))) IN ctrl is true
-- specification  G (reset_3 -> (reset_3 U (floor = 3 & door = open))) IN ctrl is true
-- specification  G (((pressed_1 & floor = 1) & door = open) -> reset_1) IN ctrl is true
-- specification  G (((pressed_2 & floor = 2) & door = open) -> reset_2) IN ctrl is true
-- specification  G (((pressed_3 & floor = 3) & door = open) -> reset_3) IN ctrl is true
-- specification  G ((direction = up | direction = down) -> door = closed) IN ctrl is true
-- specification  G (((!pressed_1 & !pressed_2) & !pressed_3) -> (door_cmd = nop & direction = stop)) IN ctrl is true
--/
